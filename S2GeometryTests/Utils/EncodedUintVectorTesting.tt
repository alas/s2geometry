<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace S2Geometry;

internal class EncodedUIntVectorTesting
{<#
var types = new List<(Type typename, int typesize, int typebitsize)>
{
    (typeof(UInt16), sizeof(UInt16), 16),
    (typeof(UInt32), sizeof(UInt32), 32),
    (typeof(UInt64), sizeof(UInt64), 64),
};

foreach (var tuple in types) {
    Type type = tuple.typename;
    int size = tuple.typesize;
    int bitsize = tuple.typebitsize;
    if (type != typeof(Byte)) Write(Environment.NewLine);
#>
    // TestEncodedUIntVector
    internal static void TestEncodedUIntVector_<#= bitsize #>(<#= type.Name #>[] expected, int expected_bytes)
    {
        Encoder encoder = new();
        EncodedUIntVector<<#= type.Name #>>.EncodeUIntVector(expected, encoder);
        Assert.Equal(expected_bytes, encoder.Length());
        var decoder = encoder.GetDecoder();
        var (success, actual) = EncodedUIntVector<UInt<#= bitsize #>>.Init(decoder);
        Assert.True(success);
        Assert.Equal(actual!.Decode(), expected);
    }

    // TestLowerBound
    internal static void TestLowerBound_<#= bitsize #>(int bytes_per_value, int num_values)
    {
        var v = MakeSortedTestVector_<#= bitsize #>(bytes_per_value, num_values);
        Encoder encoder = new();
        var actual = MakeEncodedVector_<#= bitsize #>(v, encoder);
        foreach (var x in v)
        {
            Assert.Equal(v.GetLowerBound(x), actual.LowerBound(x));
            if (x > 0)
            {
                Assert.Equal(v.GetLowerBound(x - 1), actual.LowerBound((<#= type.Name #>)(x - 1)));
            }
        }
    }

    private static <#= type.Name #>[] MakeSortedTestVector_<#= bitsize #>(int bytes_per_value, int num_values)
    {
        Assert.True(bytes_per_value <= sizeof(<#= type.Name #>));
        <#= type.Name #> limit_value = (<#= type.Name #>)(~0 >> (8 * (sizeof(<#= type.Name #>) - bytes_per_value)));
        List<<#= type.Name #>> values = new();
        for (int i = 0; i + 1 < num_values; ++i)
        {
            values.Add((<#= type.Name #>)(limit_value * ((double)i / (num_values - 1))));
        }
        // The last value needs special handling since casting it to "double" loses
        // precision when T == UInt64.
        values.Add(limit_value);
        Assert.True(values.IsSorted());
        return values.ToArray();
    }

    internal static EncodedUIntVector<<#= type.Name #>> MakeEncodedVector_<#= bitsize #>(<#= type.Name #>[] values, Encoder encoder)
    {
        EncodedUIntVector<<#= type.Name #>>.EncodeUIntVector(values, encoder);
        var decoder = encoder.GetDecoder();
        var (success, actual) = EncodedUIntVector<<#= type.Name #>>.Init(decoder);
        Assert.True(success);
        return actual!;
    }
<# } #>
}
